(= (+ 1 2) 3)
(= (+ 1 2 3) 6)
(= (+ -1 -3) -4)

(定义 测试-+ ()
  (与
    (= (+ 1 2) 3)
    (= (+ 1 2 3) 6)
    (= (+ -1 -3) -4)))

(测试-+)

(定义 测试-+ ()
  (格式 t "~:[失败~;通过~] ... ~a~%" (= (+ 1 2) 3) '(= (+ 1 2) 3))
  (格式 t "~:[失败~;通过~] ... ~a~%" (= (+ 1 2 3) 6) '(= (+ 1 2 3) 6))
  (格式 t "~:[失败~;通过~] ... ~a~%" (= (+ -1 -3) -4) '(= (+ -1 -3) -4)))

(测试-+)

(定义 报告结果 (结果 外形)
  (格式 t "~:[失败~;通过~] ... ~a~%" 结果 外形))

(定义 测试-+ ()
  (报告结果 (= (+ 1 2) 3) '(= (+ 1 2) 3))
  (报告结果 (= (+ 1 2 3) 6) '(= (+ 1 2 3) 6))
  (报告结果 (= (+ -1 -3) -4) '(= (+ -1 -3) -4)))

(报告结果 (= (+ 1 2) 3) '(= (+ 1 2) 3))

(宏 校验 (外形)
  `(报告结果 ,外形 ',外形))

(校验 (= (+ 1 2) 3))

(定义 测试-+ ()
  (校验 (= (+ 1 2) 3))
  (校验 (= (+ 1 2 3) 6))
  (校验 (= (+ -1 -3) -4)))

(宏 校验 (&body 外形)
  `(依序求值
     ,@(循环 for f in 外形 collect `(报告结果 ,f ',f))))

(定义 测试-+ ()
  (校验
    (= (+ 1 2) 3)
    (= (+ 1 2 3) 6)
    (= (+ -1 -3) -4)))

(测试-+)

(定义 报告结果 (结果 外形)
  (格式 t "~:[失败~;通过~] ... ~a~%" 结果 外形)
  结果)

(defmacro with-gensyms ((&rest names) &body body)
              `(let ,(loop for n in names collect `(,n (gensym)))
                 ,@body))

(宏 合并-结果 (&body 外形)
  (宏变量 (结果)
    `(变量 ((,结果 t))
      ,@(循环 for f in 外形 collect `(如果假 ,f (赋值 ,结果 nil)))
      ,结果)))

(宏 校验 (&body 外形)
  `(合并-结果
    ,@(循环 for f in 外形 collect `(报告结果 ,f ',f))))


(定义 测试-+ ()
  (校验
    (= (+ 1 2) 3)
    (= (+ 1 2 3) 6)
    (= (+ -1 -3) -4)))

(定义 测试-* ()
  (校验
    (= (* 2 2) 4)
    (= (* 3 5) 15)))

(定义 测试-算术 ()
  (合并-结果
   (测试-+)
   (测试-*)))

(测试-算术)

(空值全局变量 *测试-名字* nil)

(定义 报告结果 (结果 外形)
  (格式 t "~:[失败~;通过~] ... ~a: ~a~%" 结果 *测试-名字* 外形)
  结果)

(测试-算术)

(定义 测试-+ ()
  (变量 ((*测试-名字* '测试-+))
    (校验
      (= (+ 1 2) 3)
      (= (+ 1 2 3) 6)
      (= (+ -1 -3) -4))))

(定义 测试-* ()
  (变量 ((*测试-名字* '测试-*))
    (校验
      (= (* 2 2) 4)
      (= (* 3 5) 15))))

(测试-算术)

(宏 定义测试 (名字 参数 &body body)
  `(定义 ,名字 ,参数
    (变量 ((*测试-名字* ',名字))
      ,@body)))

(定义测试 测试-+ ()
  (校验
    (= (+ 1 2) 3)
    (= (+ 1 2 3) 6)
    (= (+ -1 -3) -4)))

(宏 定义测试 (名字 参数 &body body)
  `(定义 ,名字 ,参数
    (变量 ((*测试-名字* (拼接 *测试-名字* (列表 ',名字))))
      ,@body)))

(定义测试 测试-+ ()
  (校验
    (= (+ 1 2) 3)
    (= (+ 1 2 3) 6)
    (= (+ -1 -3) -4)))

(定义测试 测试-* ()
    (校验
      (= (* 2 2) 4)
      (= (* 3 5) 15)))

(定义测试 测试-算术 ()
  (合并-结果
   (测试-+)
   (测试-*)))

(测试-算术)

(定义测试 测试-数学 ()
  (测试-算术))

(测试-数学)





(空值全局变量 *测试-名字* nil)

(宏 定义测试 (名字 参数 &body body)
"定义测试功能。 在测试函数中，我们可以调用其他测试函数或使用“校验”来运行单个测试用例。"
  `(定义 ,名字 ,参数
    (变量 ((*测试-名字* (拼接 *测试-名字* (列表 ',名字))))
      ,@body)))

(宏 校验 (&body 外形)
"将'外形'中的每个表达式作为测试用例运行。"
  `(合并-结果
    ,@(循环 for f in 外形 collect `(报告结果 ,f ',f))))

(defmacro with-gensyms ((&rest names) &body body)
              `(let ,(loop for n in names collect `(,n (gensym)))
                 ,@body))

(宏 合并-结果 (&body 外形)
"结合按顺序评估“表格”的结果（作为布尔值）。"
  (宏变量 (结果)
    `(变量 ((,结果 t))
      ,@(循环 for f in 外形 collect `(如果假 ,f (赋值 ,结果 nil)))
      ,结果)))

(定义 报告结果 (结果 外形)
"报告单个测试用例的结果。 被'检查'调用。"
  (格式 t "~:[失败~;通过~] ... ~a: ~a~%" 结果 *测试-名字* 外形)
  结果)
